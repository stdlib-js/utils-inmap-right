{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Invokes a function once for each element in a collection and updates the collection in-place, iterating from right to left.\n*\n* ## Notes\n*\n* -   For dynamic array resizing, the only behavior made intentionally consistent with `inmap` (iterating from left to right) is when elements are pushed onto the beginning (end) of an array. In other words, for `inmap()`, `[].push()` behavior is consistent with `inmapRight()` `[].unshift()` behavior.\n*\n*\n* @param {Collection} collection - input collection\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a function\n* @returns {Collection} input collection\n*\n* @example\n* function scale( value, index, collection ) {\n*     console.log( '%s: %d', index, value );\n*     return value * index;\n* }\n*\n* var arr = [ 1, 2, 3, 4 ];\n*\n* var out = inmapRight( arr, scale );\n* // returns [ 0, 2, 6, 12 ]\n*\n* var bool = ( out === arr );\n* // returns true\n*/\nfunction inmapRight( collection, fcn, thisArg ) {\n\tvar len;\n\tvar v;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( '0kKBO', collection ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0kK2S', fcn ) );\n\t}\n\tlen = collection.length;\n\tfor ( i = len-1; i >= 0; i-- ) {\n\t\tv = fcn.call( thisArg, collection[ i ], i, collection );\n\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\ti += ( collection.length - len );\n\t\t\tlen = collection.length;\n\t\t}\n\t\tif ( i >= 0 && i < len ) {\n\t\t\tcollection[ i ] = v;\n\t\t}\n\t}\n\treturn collection;\n}\n\n\n// EXPORTS //\n\nexport default inmapRight;\n"],"names":["inmapRight","collection","fcn","thisArg","len","v","i","isCollection","TypeError","format","isFunction","length","call"],"mappings":";;+QA0DA,SAASA,EAAYC,EAAYC,EAAKC,GACrC,IAAIC,EACAC,EACAC,EACJ,IAAMC,EAAcN,GACnB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,IAAMS,EAAYR,GACjB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAGvC,IAAMI,GADNF,EAAMH,EAAWU,QACH,EAAGL,GAAK,EAAGA,IACxBD,EAAIH,EAAIU,KAAMT,EAASF,EAAYK,GAAKA,EAAGL,GAGtCG,IAAQH,EAAWU,SACvBL,GAAOL,EAAWU,OAASP,EAC3BA,EAAMH,EAAWU,QAEbL,GAAK,GAAKA,EAAIF,IAClBH,EAAYK,GAAMD,GAGpB,OAAOJ"}